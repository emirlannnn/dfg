{"ast":null,"code":"var _jsxFileName = \"/Users/emirlan/Desktop/ogogo/react/\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430/3_lesson/src/routes/list/JobsList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport RemoteFilter from '../../components/RemoteFilter';\nimport CityFilter from '../../components/CityFilter';\nimport TagFilter from '../../components/TagFilter';\nimport { Link } from 'react-router-dom';\nimport AppContext from '../../helpers/AppContext';\nimport useInfiniteScroll from '../../helpers/useInfiniteScroll';\nimport './list.css';\nimport { Row, Col, Card, List, Layout } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction JobsList() {\n  _s();\n\n  const [list, setList] = useState([]);\n  const [filteredList, setFilteredList] = useState([]);\n  const [cityList, setCityList] = useState([]);\n  const [tagList, setTagList] = useState([]);\n  const [remoteFilter, setRemoteFilter] = useState('');\n  const [cityFilter, setCityFilter] = useState('');\n  const [tagFilter, setTagFilter] = useState('');\n  const [isFetching, setIsFetching] = useInfiniteScroll(getList);\n  const [page, setPage] = useState(1);\n  const dataContext = useContext(AppContext); // get data from api\n\n  useEffect(() => {\n    getList();\n  }, []);\n\n  function getList() {\n    const API_URL = 'https://www.arbeitnow.com/api';\n    fetch(API_URL + '/job-board-api?page=' + page).then(response => response.json()).then(jobs => {\n      const data = jobs.data.map(j => {\n        return {\n          slug: j.slug,\n          companyName: j.company_name,\n          title: j.title,\n          description: j.description,\n          remote: j.remote,\n          url: j.url,\n          tags: j.tags,\n          jobTypes: j.job_types,\n          location: j.location,\n          createdAt: j.created_at\n        };\n      });\n      setList([...list, ...data]);\n      setFilteredList([...list, ...data]);\n      dataContext.setDataList([...list, ...data]);\n      getCityList([...list, ...data]);\n      getTagList([...list, ...data]);\n      setPage(page + 1);\n    });\n  } // get cities and tags lists\n\n\n  const getCityList = data => {\n    const allList = data.map(j => j.location);\n    const uniqList = [...new Set(allList)];\n    const list = uniqList.sort().map(i => {\n      return {\n        value: i,\n        label: i\n      };\n    });\n    setCityList(list);\n  };\n\n  const getTagList = data => {\n    let allList = [];\n    data.forEach(j => allList = [...j.tags, ...allList]);\n    const uniqList = [...new Set(allList)];\n    const list = uniqList.sort().map(i => {\n      return {\n        value: i,\n        label: i\n      };\n    });\n    setTagList(list);\n  }; // set filters\n\n\n  const handleRemoteChange = data => setRemoteFilter(data);\n\n  const handleCityChange = data => setCityFilter(data);\n\n  const handleTagChange = data => setTagFilter(data); // filter data\n\n\n  useEffect(() => {\n    filterList(remoteFilter, cityFilter, tagFilter);\n  }, [remoteFilter, cityFilter, tagFilter]);\n\n  function filterList(remote, city, tag) {\n    let data = list;\n\n    if (remote && remote === 'Remote') {\n      data = data.filter(l => l.remote);\n    }\n\n    if (remote && remote === 'Office') {\n      data = data.filter(l => !l.remote);\n    }\n\n    if (city) {\n      data = data.filter(l => l.location === city);\n    }\n\n    if (tag) {\n      data = data.filter(l => l.tags.includes(tag));\n    }\n\n    setFilteredList(data);\n  }\n\n  function renderVacancy(title, slug) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-item\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: {\n          pathname: '/vacancy/' + slug\n        },\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Row, {\n    class: \"list\",\n    children: [/*#__PURE__*/_jsxDEV(Col, {\n      span: \"6\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: \"filter-card\",\n        children: [/*#__PURE__*/_jsxDEV(RemoteFilter, {\n          value: remoteFilter,\n          onChange: handleRemoteChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CityFilter, {\n          value: cityFilter,\n          cities: cityList,\n          onChange: handleCityChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TagFilter, {\n          value: tagFilter,\n          tags: tagList,\n          onChange: handleTagChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      span: 18,\n      children: /*#__PURE__*/_jsxDEV(List, {\n        size: \"large\",\n        dataSource: filteredList,\n        renderItem: item => renderVacancy(item.title, item.slug)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n\n_s(JobsList, \"qRszdY+zOQrdsuBrsrSpRnCe978=\", false, function () {\n  return [useInfiniteScroll];\n});\n\n_c = JobsList;\nexport default JobsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"JobsList\");","map":{"version":3,"names":["React","useState","useEffect","useContext","RemoteFilter","CityFilter","TagFilter","Link","AppContext","useInfiniteScroll","Row","Col","Card","List","Layout","JobsList","list","setList","filteredList","setFilteredList","cityList","setCityList","tagList","setTagList","remoteFilter","setRemoteFilter","cityFilter","setCityFilter","tagFilter","setTagFilter","isFetching","setIsFetching","getList","page","setPage","dataContext","API_URL","fetch","then","response","json","jobs","data","map","j","slug","companyName","company_name","title","description","remote","url","tags","jobTypes","job_types","location","createdAt","created_at","setDataList","getCityList","getTagList","allList","uniqList","Set","sort","i","value","label","forEach","handleRemoteChange","handleCityChange","handleTagChange","filterList","city","tag","filter","l","includes","renderVacancy","pathname","item"],"sources":["/Users/emirlan/Desktop/ogogo/react/Новая папка/3_lesson/src/routes/list/JobsList.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport RemoteFilter from '../../components/RemoteFilter';\nimport CityFilter from '../../components/CityFilter';\nimport TagFilter from '../../components/TagFilter';\nimport { Link } from 'react-router-dom';\nimport AppContext from '../../helpers/AppContext';\nimport useInfiniteScroll from '../../helpers/useInfiniteScroll';\nimport './list.css';\nimport { Row, Col, Card, List, Layout } from 'antd';\n\nfunction JobsList() {\n  const [list, setList] = useState([]);\n  const [filteredList, setFilteredList] = useState([]);\n  const [cityList, setCityList] = useState([]);\n  const [tagList, setTagList] = useState([]);\n  const [remoteFilter, setRemoteFilter] = useState('');\n  const [cityFilter, setCityFilter] = useState('');\n  const [tagFilter, setTagFilter] = useState('');\n  const [isFetching, setIsFetching] = useInfiniteScroll(getList);\n  const [page, setPage] = useState(1);\n  const dataContext = useContext(AppContext);\n\n  // get data from api\n  useEffect(() => {\n    getList();\n  }, []);\n\n  function getList() {\n    const API_URL = 'https://www.arbeitnow.com/api';\n    fetch(API_URL + '/job-board-api?page=' + page)\n      .then((response) => response.json())\n      .then((jobs) => {\n        const data = jobs.data.map((j) => {\n          return {\n            slug: j.slug,\n            companyName: j.company_name,\n            title: j.title,\n            description: j.description,\n            remote: j.remote,\n            url: j.url,\n            tags: j.tags,\n            jobTypes: j.job_types,\n            location: j.location,\n            createdAt: j.created_at,\n          };\n        });\n        setList([...list, ...data]);\n        setFilteredList([...list, ...data]);\n        dataContext.setDataList([...list, ...data]);\n        getCityList([...list, ...data]);\n        getTagList([...list, ...data]);\n        setPage(page + 1);\n      });\n  }\n\n  // get cities and tags lists\n  const getCityList = (data) => {\n    const allList = data.map((j) => j.location);\n    const uniqList = [...new Set(allList)];\n    const list = uniqList.sort().map((i) => {\n      return {\n        value: i,\n        label: i,\n      };\n    });\n    setCityList(list);\n  };\n\n  const getTagList = (data) => {\n    let allList = [];\n    data.forEach((j) => (allList = [...j.tags, ...allList]));\n    const uniqList = [...new Set(allList)];\n    const list = uniqList.sort().map((i) => {\n      return {\n        value: i,\n        label: i,\n      };\n    });\n    setTagList(list);\n  };\n\n  // set filters\n  const handleRemoteChange = (data) => setRemoteFilter(data);\n  const handleCityChange = (data) => setCityFilter(data);\n  const handleTagChange = (data) => setTagFilter(data);\n\n  // filter data\n  useEffect(() => {\n    filterList(remoteFilter, cityFilter, tagFilter);\n  }, [remoteFilter, cityFilter, tagFilter]);\n\n  function filterList(remote, city, tag) {\n    let data = list;\n\n    if (remote && remote === 'Remote') {\n      data = data.filter((l) => l.remote);\n    }\n\n    if (remote && remote === 'Office') {\n      data = data.filter((l) => !l.remote);\n    }\n\n    if (city) {\n      data = data.filter((l) => l.location === city);\n    }\n\n    if (tag) {\n      data = data.filter((l) => l.tags.includes(tag));\n    }\n\n    setFilteredList(data);\n  }\n\n  function renderVacancy(title, slug) {\n    return (\n      <div className=\"list-item\">\n        <Link\n          to={{\n            pathname: '/vacancy/' + slug,\n          }}\n        >\n          {title}\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <Row class=\"list\">\n      <Col span=\"6\">\n        <Card className=\"filter-card\">\n          <RemoteFilter value={remoteFilter} onChange={handleRemoteChange} />\n          <CityFilter value={cityFilter} cities={cityList} onChange={handleCityChange} />\n          <TagFilter value={tagFilter} tags={tagList} onChange={handleTagChange} />\n        </Card>\n      </Col>\n      <Col span={18}>\n        <List\n          size=\"large\"\n          dataSource={filteredList}\n          renderItem={(item) => renderVacancy(item.title, item.slug)}\n        />\n      </Col>\n    </Row>\n  );\n}\n\nexport default JobsList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}